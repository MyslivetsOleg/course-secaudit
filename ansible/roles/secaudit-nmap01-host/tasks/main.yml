---
# tasks file for roles/secaudit-nmap01-host
- name: Installing dependencies
  apt:
    name:
      - python3
      - python3-pip
      - sqlite3
      - build-essential
      - libssl-dev
      - libpam0g-dev
      - libmariadb-dev
      - libsqlite3-dev
      - libwrap0-dev
      - wget
      - tar
      - python3-flask
    update_cache: yes

# - name: Installing Flask
#   pip:
#     name: flask

- name: App catalog creation
  file:
    path: /opt/vulnapps
    state: directory

- name: Deploy vulnerable App
  copy:
    dest: /opt/vulnapps/rce_app.py
    content: |
      from flask import Flask, request
      app = Flask(__name__)

      @app.route('/')
      def index():
          endpoint = request.args.get('endpoint', '')
          try:
              result = eval(endpoint)
          except Exception as e:
              result = str(e)
          return f"<pre>{result}</pre>"

      if __name__ == "__main__":
          app.run(host="0.0.0.0", port=5000)
    mode: '0755'

- name: Deploy vulnerable SQL-injection section
  copy:
    dest: /opt/vulnapps/sqli_app.py
    content: |
      from flask import Flask, request
      import sqlite3

      app = Flask(__name__)
      db = "/tmp/users.db"

      def init_db():
          conn = sqlite3.connect(db)
          c = conn.cursor()
          c.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)")
          c.execute("INSERT INTO users (username, password) VALUES ('admin', 'admin')")
          conn.commit()
          conn.close()

      @app.route('/', methods=["GET", "POST"])
      def login():
          if request.method == "POST":
              username = request.form.get("username")
              password = request.form.get("password")
              conn = sqlite3.connect(db)
              c = conn.cursor()
              query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
              result = c.execute(query).fetchall()
              conn.close()
              return "Welcome!" if result else "Access Denied"
          return '''
              <form method="post">
                Username: <input name="username"><br>
                Password: <input name="password"><br>
                <input type="submit">
              </form>
          '''

      if __name__ == "__main__":
          init_db()
          app.run(host="0.0.0.0", port=5001)
    mode: '0755'

- name: Creating systemd unit file for Flask-app
  copy:
    dest: /etc/systemd/system/{{ item.name }}
    content: |
      [Unit]
      Description={{ item.desc }}
      After=network.target

      [Service]
      ExecStart=/usr/bin/python3 {{ item.script }}
      Restart=always
      User=root

      [Install]
      WantedBy=multi-user.target
  loop:
    - { name: rce.service, desc: "RCE vulnerable app", script: "/opt/vulnapps/rce_app.py" }
    - { name: sqli.service, desc: "SQLi vulnerable app", script: "/opt/vulnapps/sqli_app.py" }

- name: Run Flask-app
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - rce.service
    - sqli.service

- name: Download ProFTPD
  get_url:
    url: "{{ proftpd_download_url }}"
    dest: /tmp/proftpd.tar.gz

- name: Create `{{ proftpd_src_dir }}` folder
  file:
    path: "{{ proftpd_src_dir }}"
    state: directory
    mode: '0755'

- name: Extract src
  unarchive:
    src: /tmp/proftpd.tar.gz
    dest: "{{ proftpd_src_dir }}"
    remote_src: yes
    creates: "{{ proftpd_src_dir }}/configure"

- name: Deploy  Proftpd with mod_copy
  shell: |
    ./configure --prefix={{ proftpd_install_prefix }} --sysconfdir=/etc --with-modules=mod_copy
    make
    make install
  args:
    chdir: "{{ proftpd_src_dir }}/proftpd-1.3.5"
    creates: /usr/sbin/proftpd

- name: Create ftp user
  user:
    name: ftp
    shell: /usr/sbin/nologin
    home: /srv/ftp
    system: yes
    create_home: no

- name: Create dir for anon user FTP
  file:
    path: "{{ ftp_dir }}"
    state: directory
    owner: ftp
    group: nogroup
    mode: '0755'

- name: Check FTP user
  user:
    name: ftp
    shell: /usr/sbin/nologin
    home: "{{ ftp_dir }}"
    system: true

- name: Config ProFTPD with mod_copy and anon access
  copy:
    dest: /etc/proftpd.conf
    content: |
      ServerName                      "Vulnerable FTP Server"
      ServerType                      standalone
      DefaultServer                   on
      Port                            21
      Umask                           022
      MaxInstances                    30
      User                            nobody
      Group                           nogroup
      AllowOverwrite                  on

      <Limit LOGIN>
        AllowAll
      </Limit>

      <Anonymous {{ ftp_dir }}>
        User                          ftp
        Group                         nogroup
        UserAlias                     anonymous ftp
        RequireValidShell             off
        MaxClients                    10

        <Directory *>
          <Limit WRITE>
            AllowAll
          </Limit>
        </Directory>
      </Anonymous>

- name: Creating FTP directory
  file:
    path: /srv/ftp
    state: directory
    mode: '0777'

- name: Creating systemd unit for ProFTPD
  copy:
    dest: /etc/systemd/system/proftpd.service
    content: |
      [Unit]
      Description=ProFTPD FTP Server
      After=network.target

      [Service]
      Type=simple
      ExecStart=/usr/sbin/proftpd --nodaemon
      ExecReload=/bin/kill -HUP $MAINPID
      KillMode=process
      Restart=on-failure

      [Install]
      WantedBy=multi-user.target

- name: Run ProFTPD Service
  systemd:
    name: proftpd.service
    enabled: yes
    state: started