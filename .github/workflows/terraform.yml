name: 'Terraform - Deploy Resources'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.4.1"
  TF_WORKING_DIR: terraform

jobs:
  terraform:
    name: 'Terraform - Deploy Resources'
    runs-on: self-hosted
    environment: production
   
    defaults:
      run:
        shell: bash

    steps: 
    - name: Checkout
      uses: actions/checkout@v4

    - name: Terraform Init
      run: |
       terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false -upgrade \
        -backend-config="bucket=${{ secrets.SECAUDIT_CICD_MINIO_BUCKET }}" \
        -backend-config="key=tfstate/secaudit.tfstate" \
        -backend-config="endpoint=http://${{ secrets.SECAUDIT_CICD_MINIO_FQDN }}:${{ secrets.SECAUDIT_CICD_MINIO_PORT }}" \
        -backend-config="access_key=${{ secrets.SECAUDIT_CICD_MINIO_USER }}" \
        -backend-config="secret_key=${{ secrets.SECAUDIT_CICD_MINIO_PWD }}" \
        -backend-config="skip_credentials_validation=true" \
        -backend-config="skip_metadata_api_check=true" \
        -backend-config="force_path_style=true"
      env:
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: ${{ secrets.SECAUDIT_CICD_MINIO_USER }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_PWD }}
        AWS_SKIP_REQUESTING_ACCOUNT_ID: true
        TF_VAR_opennebula_endpoint: ${{ secrets.ONE_ENDPOINT }}
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        MINIO_ACCESS_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_USER }}
        MINIO_SECRET_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_PWD }}
        MINIO_ENDPOINT: ${{ secrets.SECAUDIT_CICD_MINIO_ENDPOINT }}
        MINIO_PORT: ${{ secrets.SECAUDIT_CICD_MINIO_PORT }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: | 
        terraform -chdir=${{ env.TF_WORKING_DIR }} plan -input=false \
          -var="minio_endpoint=${{ secrets.SECAUDIT_CICD_MINIO_FQDN }}" \
          -var="minio_bucket=${{ secrets.SECAUDIT_CICD_MINIO_BUCKET }}" \
          -var="minio_port=${{ secrets.SECAUDIT_CICD_MINIO_PORT }}" \
          -var="minio_access_key=${{ secrets.SECAUDIT_CICD_MINIO_USER }}" \
          -var="minio_secret_key=${{ secrets.SECAUDIT_CICD_MINIO_PWD }}" \
          -var="opennebula_endpoint=${{ secrets.ONE_ENDPOINT }}" \
          -var="opennebula_username=${{ secrets.ONE_USERNAME }}" \
          -var="opennebula_password=${{ secrets.ONE_PASSWORD }}"
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_opennebula_endpoint: ${{ secrets.ONE_ENDPOINT }}
        MINIO_ACCESS_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_USER }}
        MINIO_SECRET_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_PWD }}
 

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply      
      run: |
        terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve -input=false \
          -var="minio_endpoint=${{ secrets.SECAUDIT_CICD_MINIO_FQDN }}" \
          -var="minio_bucket=${{ secrets.SECAUDIT_CICD_MINIO_BUCKET }}" \
          -var="minio_port=${{ secrets.SECAUDIT_CICD_MINIO_PORT }}" \
          -var="minio_access_key=${{ secrets.SECAUDIT_CICD_MINIO_USER }}" \
          -var="minio_secret_key=${{ secrets.SECAUDIT_CICD_MINIO_PWD }}" \
          -var="opennebula_endpoint=${{ secrets.ONE_ENDPOINT }}" \
          -var="opennebula_username=${{ secrets.ONE_USERNAME }}" \
          -var="opennebula_password=${{ secrets.ONE_PASSWORD }}"
        terraform -chdir=sectools-terraform state pull > sectools-terraform/terraform.tfstate
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_opennebula_endpoint: ${{ secrets.ONE_ENDPOINT }}
        MINIO_ACCESS_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_USER }}
        MINIO_SECRET_KEY: ${{ secrets.SECAUDIT_CICD_MINIO_PWD }}
